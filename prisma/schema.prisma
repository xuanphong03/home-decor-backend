// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                 @id @default(autoincrement())
  email          String              @unique @db.VarChar(100)
  name           String              @db.VarChar(200)
  password       String              @db.VarChar(200)
  phoneNumber    String?             @db.VarChar(20)
  imageUrl       String?
  verify         DateTime?
  address        Address[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @default(now())
  roles          UsersOnRoles[]
  permissions    UsersOnPermission[]
  orders         Order[]
  cart           Cart?
  isRoot         Boolean             @default(false)
  isSupport      Boolean             @default(false)
  isAdmin        Boolean             @default(false)
  productsOnCart ProductsOnCart[]

  // Quan hệ với hội thoại và tin nhắn
  conversationsAsUser  Conversation[] @relation("UserConversations")
  conversationsAsAdmin Conversation[] @relation("AdminConversations")
  messagesSent         Message[]

  @@map("users")
}

model Address {
  id           Int      @id @default(autoincrement())
  districtId   Int
  provinceId   Int
  streetName   String   @db.VarChar(50)
  districtName String   @db.VarChar(50)
  provinceName String   @db.VarChar(50)
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@map("addresses")
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(100)
  description      String
  shortDescription String
  imageUrl         String
  quantity         Int                @default(0)
  finalPrice       Int
  originalPrice    Int
  salePercent      Int                @default(0)
  popular          Boolean            @default(false)
  status           Boolean            @default(true)
  rating           Float              @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  categoryId       Int
  category         Category           @relation(fields: [categoryId], references: [id])
  orderDetail      ProductsOnOrders[]
  productsOnCart   ProductsOnCart[]

  @@map("products")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(200)
  imageUrl  String    @db.VarChar(200)
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  Product[]

  @@map("categories")
}

model Role {
  id          Int                  @id @default(autoincrement())
  name        String               @db.VarChar(200)
  status      Boolean              @default(true)
  isSuper     Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now())
  permissions RolesOnPermissions[]
  users       UsersOnRoles[]

  @@map("roles")
}

model Permission {
  id        Int                  @id @default(autoincrement())
  name      String               @db.VarChar(200)
  status    Boolean              @default(true)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now())
  roles     RolesOnPermissions[]
  users     UsersOnPermission[]

  @@map("permissions")
}

model RolesOnPermissions {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())

  @@map("roles_permissions")
}

model UsersOnRoles {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("users_roles")
}

model UsersOnPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())

  @@map("users_permission")
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(200)
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orders    Order[]

  @@map("payment_methods")
}

model Order {
  id              Int                @id @default(autoincrement())
  userId          Int
  note            String
  address         String
  totalPrice      Int
  shippingPrice   Int
  discountPrice   Int                @default(0)
  shippingStatus  String             @default("PENDING")
  paymentStatus   Boolean            @default(false)
  paymentMethodId Int
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now())
  products        ProductsOnOrders[]
  user            User               @relation(fields: [userId], references: [id])
  paymentMethod   PaymentMethod      @relation(fields: [paymentMethodId], references: [id])

  @@map("orders")
}

model ProductsOnOrders {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  price     Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_details")
}

model Cart {
  id        Int              @id @default(autoincrement())
  userId    Int              @unique
  user      User             @relation(fields: [userId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
  products  ProductsOnCart[]

  @@map("cart")
}

model ProductsOnCart {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@map("cart_details")
}

model Conversation {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(200)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Hai bên của cuộc hội thoại: admin và user
  supportId Int
  userId    Int
  supporter User @relation("AdminConversations", fields: [supportId], references: [id])
  user      User @relation("UserConversations", fields: [userId], references: [id])

  // Tin nhắn trong cuộc hội thoại
  messages Message[]

  @@unique([supportId, userId]) // Một admin chỉ có một cuộc hội thoại với một user
  @@map("conversations")
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String       @db.Text()
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  isSeen         Boolean      @default(false)
  senderId       Int // Ai gửi tin nhắn
  conversationId Int // Thuộc cuộc hội thoại nào
  sender         User         @relation(fields: [senderId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@map("messages")
}
